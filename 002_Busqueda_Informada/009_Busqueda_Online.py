# 16_Busqueda_Online.
# El GPS explora y decide en tiempo real seg√∫n lo que va descubriendo en la calle.

from typing import Dict, List
import random  # import disponible para simulaciones estoc√°sticas (aqu√≠ no se usa)


# Mapa urbano: lista de vecinos para cada nodo. Incluimos una "sorpresa"
# que simula una calle que puede cerrarse durante la b√∫squeda.
grafo: Dict[str, List[str]] = {
    "Casa": ["Av1", "Mercado"],
    "Av1": ["Casa", "Plaza"],
    "Plaza": ["Av1", "Parque", "Mercado"],
    "Parque": ["Plaza", "Hospital"],
    "Mercado": ["Casa", "Plaza"],
    "Hospital": ["Parque"]
}


# Heur√≠stica: estimaci√≥n de distancia al Hospital (valores menores = mejor)
h: Dict[str, int] = {
    "Casa": 8,
    "Av1": 6,
    "Plaza": 4,
    "Parque": 2,
    "Mercado": 5,
    "Hospital": 0
}


# Ejemplo de calle que se cierra inesperadamente durante la simulaci√≥n
CALLE_CERRADA = ("Plaza", "Parque")


def online_search(inicio: str, destino: str, max_pasos: int = 10):
    """
    Simula una b√∫squeda online (decisiones en tiempo real):

    - El GPS conoce s√≥lo el fragmento del mapa que ha descubierto.
    - En cada paso elige el vecino m√°s prometedor seg√∫n la heur√≠stica h.
    - Si detecta eventos din√°micos (p. ej. una calle cerrada), adapta la elecci√≥n.
    - max_pasos limita la longitud m√°xima de la simulaci√≥n.
    """

    actual = inicio
    camino: List[str] = [actual]
    descubiertos = {inicio}  # nodos que el GPS ha visto hasta ahora
    print(f"Iniciando en: {actual}")

    # Simulaci√≥n paso a paso
    for paso in range(max_pasos):
        vecinos = grafo.get(actual, [])

        # Detectar si la calle cerrada afecta al nodo actual; si es as√≠ la quitamos
        if CALLE_CERRADA[0] == actual and CALLE_CERRADA[1] in vecinos:
            vecinos.remove(CALLE_CERRADA[1])
            print(f"‚ö†Ô∏è  Calle cerrada detectada: {actual} ‚Üí {CALLE_CERRADA[1]}")

        # Si no quedan vecinos posibles, la b√∫squeda se detiene
        if not vecinos:
            print("üö´ Sin rutas disponibles, deteniendo b√∫squeda.")
            break

        # Elegir el vecino con menor heur√≠stica (parece m√°s cerca del objetivo)
        siguiente = min(vecinos, key=lambda n: h[n])

        print(f"‚Üí Paso {paso+1}: {actual} ‚Üí {siguiente} (h={h[siguiente]})")

        # Avanzamos al siguiente nodo y lo registramos
        actual = siguiente
        camino.append(actual)
        descubiertos.add(actual)

        # Si alcanzamos el destino, terminamos con √©xito
        if actual == destino:
            print("‚úÖ ¬°Destino alcanzado!")
            break

        # Simulaci√≥n adicional: en alg√∫n punto el GPS puede 'descubrir' una nueva ruta
        # (esto demuestra que el mapa puede crecer en tiempo real).
        if actual == "Av1" and "Mercado" not in grafo["Av1"]:
            grafo["Av1"].append("Mercado")
            print("üÜï Nueva ruta descubierta: Av1 ‚Üí Mercado")

    return camino


def demo_online():
    origen, destino = "Casa", "Hospital"
    ruta = online_search(origen, destino)

    print("\nRuta recorrida en tiempo real:")
    print("  " + " ‚Üí ".join(ruta))


if __name__ == "__main__":
    demo_online()
